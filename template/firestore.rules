rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isIndustryUser() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['label', 'distributor', 'admin'];
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Invite codes collection
    match /inviteCodes/{codeId} {
      allow read: if true;
      allow create: if isAdmin();
      allow update: if isAdmin() || 
        (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['usedCount', 'lastUsedAt', 'lastUsedBy']) &&
         request.resource.data.usedCount == resource.data.usedCount + 1);
      allow delete: if isAdmin();
    }
    
    // Public collections (read-only for all)
    match /releases/{releaseId} {
      allow read: if true;
      allow write: if isIndustryUser();
    }
    
    match /tracks/{trackId} {
      allow read: if true;
      allow write: if isIndustryUser();
    }
    
    match /artists/{artistId} {
      allow read: if true;
      allow write: if isIndustryUser();
    }
    
    match /albums/{albumId} {
      allow read: if true;
      allow write: if isIndustryUser();
    }
    
    // User profiles - PUBLIC READ for basic info
    match /users/{userId} {
      // Anyone can read public profile info
      allow read: if true;
      
      // Users can create their own profile
      allow create: if isOwner(userId);
      
      // Users can update their own profile (except role)
      allow update: if isOwner(userId) && 
        !request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'createdAt']);
      
      allow delete: if false;
      
      // User library subcollections
      match /library/{document=**} {
        allow read, write: if isOwner(userId);
      }
      
      // User history subcollection
      match /history/{document=**} {
        allow read, write: if isOwner(userId);
      }
    }
    
    // Playlists
    match /playlists/{playlistId} {
      allow read: if resource.data.public == true || 
        isOwner(resource.data.userId) || 
        (isAuthenticated() && request.auth.uid in resource.data.collaborators);
      allow create: if isAuthenticated();
      allow update: if isOwner(resource.data.userId) || 
        (isAuthenticated() && request.auth.uid in resource.data.collaborators);
      allow delete: if isOwner(resource.data.userId);
    }
    
    // User favorites (legacy - for backward compatibility)
    match /favorites/{userId} {
      allow read, write: if isOwner(userId);
    }
    
    // User history (legacy - for backward compatibility)
    match /history/{userId} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Social features - MISSING IN ORIGINAL RULES
    match /follows/{followId} {
      allow read: if true; // Public to see who follows who
      allow create: if isAuthenticated() && 
        request.resource.data.followerId == request.auth.uid;
      allow delete: if isAuthenticated() && 
        resource.data.followerId == request.auth.uid;
      allow update: if false; // Follows shouldn't be updated
    }
    
    match /activities/{activityId} {
      allow read: if true; // Public activity feed
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    match /shares/{shareId} {
      allow read: if true; // Public shares
      allow create: if isAuthenticated() && 
        request.resource.data.userId == request.auth.uid;
      allow update, delete: if isOwner(resource.data.userId);
    }
    
    // Analytics collections
    match /plays/{playId} {
      allow read: if isAdmin() || isIndustryUser() || 
        (isAuthenticated() && resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated();
      allow update: if false;
      allow delete: if false;
    }
    
    match /sessions/{sessionId} {
      allow read: if isAdmin();
      allow write: if isAuthenticated();
    }
    
    // Industry collections
    match /distributors/{distributorId} {
      allow read: if isAdmin() || isIndustryUser();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
    
    match /deliveries/{deliveryId} {
      allow read: if isIndustryUser() || isAdmin();
      allow create: if isIndustryUser();
      allow update: if isAdmin();
      allow delete: if false;
    }
    
    // File transfer collection
    match /fileTransfers/{transferId} {
      allow read: if isAdmin() || isIndustryUser();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Acknowledgments collection
    match /acknowledgments/{acknowledgmentId} {
      allow read: if isIndustryUser() || isAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
        (isAdmin() || 
         resource.data.distributorId == request.auth.uid ||
         resource.data.userId == request.auth.uid);
      allow update: if isAuthenticated() && 
        (resource.data.distributorId == request.auth.uid ||
         resource.data.userId == request.auth.uid) &&
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'readAt']);
      allow create: if false; // Only Cloud Functions can create
      allow delete: if isAdmin();
    }
    
    match /reports/{reportId} {
      allow read: if isIndustryUser() || isAdmin();
      allow write: if isAdmin();
    }
    
    // System collections
    match /config/{configId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /cache/{cacheId} {
      allow read: if true;
      allow write: if false;
    }
    
    // Delivery history collection
    match /deliveryHistory/{historyId} {
      allow read: if isIndustryUser() || isAdmin();
      allow write: if false; // Only Cloud Functions can write
    }
  }
}